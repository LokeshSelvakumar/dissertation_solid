import { VocabTerm, NamedNode } from "@inrupt/solid-common-vocab";
export default class InruptError extends Error {
    private httpErrorResponse?;
    constructor(messageOrIri: string | NamedNode | VocabTerm, messageParams?: string[], appendErrorIri?: boolean);
    httpResponse(httpErrorResponse: Response & {
        ok: false;
    }, appendHttpDetails?: boolean): InruptError;
    hasHttpResponse(): boolean;
    getHttpResponse(): (Response & {
        ok: false;
    }) | undefined;
    getHttpStatusCode(): number;
    getHttpStatusText(): string;
    static determineIfVocabTerm(value: NamedNode | VocabTerm): value is VocabTerm;
    static lookupErrorIri(iri: NamedNode | VocabTerm, messageParams?: string[]): string;
    static appendHttpResponseDetails(message: string, response: Response | undefined, append: boolean): string;
    static appendErrorIri(message: string, iri: NamedNode, append: boolean): string;
    static substituteParams(message: string, params?: string[]): string;
}
