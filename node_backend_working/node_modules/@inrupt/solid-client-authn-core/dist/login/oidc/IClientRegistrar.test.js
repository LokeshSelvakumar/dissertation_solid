"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const IClientRegistrar_1 = require("./IClientRegistrar");
(0, globals_1.describe)("handleRegistration", () => {
    (0, globals_1.it)("should perform DCR if a client WebID is provided, but the target IdP does not support Solid-OIDC", async () => {
        const options = {
            clientId: "https://some.app/registration#app",
            sessionId: "some session",
            tokenType: "DPoP",
        };
        const clientRegistrar = {
            getClient: globals_1.jest.fn(),
        };
        await (0, IClientRegistrar_1.handleRegistration)(options, { scopesSupported: ["openid"] }, globals_1.jest.fn(), clientRegistrar);
        (0, globals_1.expect)(clientRegistrar.getClient).toHaveBeenCalled();
    });
    (0, globals_1.it)("should perform DCR if no client ID is provided", async () => {
        const options = {
            sessionId: "some session",
            tokenType: "DPoP",
        };
        const clientRegistrar = {
            getClient: globals_1.jest.fn(),
        };
        await (0, IClientRegistrar_1.handleRegistration)(options, { scopesSupported: ["openid"] }, globals_1.jest.fn(), clientRegistrar);
        (0, globals_1.expect)(clientRegistrar.getClient).toHaveBeenCalled();
    });
    (0, globals_1.it)("should store provided client WebID if one provided and the Identity Provider supports Solid-OIDC", async () => {
        const options = {
            sessionId: "some session",
            tokenType: "DPoP",
            clientId: "https://my.app/registration#app",
        };
        const clientRegistrar = {
            getClient: globals_1.jest.fn(),
        };
        const storageUtility = {
            setForUser: globals_1.jest.fn(),
        };
        const client = await (0, IClientRegistrar_1.handleRegistration)(options, {
            scopesSupported: ["openid", "offline_access", "webid"],
        }, storageUtility, clientRegistrar);
        (0, globals_1.expect)(clientRegistrar.getClient).not.toHaveBeenCalled();
        (0, globals_1.expect)(storageUtility.setForUser).toHaveBeenCalled();
        (0, globals_1.expect)(client.clientType).toBe("solid-oidc");
    });
    (0, globals_1.it)("should store provided client registration information when the client ID is not a WebID", async () => {
        const options = {
            sessionId: "some session",
            tokenType: "DPoP",
            clientId: "some statically registered client ID",
            clientName: "some statically registered client name",
            clientSecret: "some statically registered client secret",
        };
        const clientRegistrar = {
            getClient: globals_1.jest.fn(),
        };
        const storageUtility = {
            setForUser: globals_1.jest.fn(),
        };
        const client = await (0, IClientRegistrar_1.handleRegistration)(options, {
            scopesSupported: ["openid"],
        }, storageUtility, clientRegistrar);
        (0, globals_1.expect)(clientRegistrar.getClient).not.toHaveBeenCalled();
        (0, globals_1.expect)(storageUtility.setForUser).toHaveBeenCalled();
        (0, globals_1.expect)(client.clientType).toBe("static");
    });
});
(0, globals_1.describe)("determineSigningAlg", () => {
    (0, globals_1.it)("returns the preferred algorithm of the supported list", () => {
        (0, globals_1.expect)((0, IClientRegistrar_1.determineSigningAlg)(["ES256", "HS256", "RS256"], ["ES256", "RS256"])).toBe("ES256");
        (0, globals_1.expect)((0, IClientRegistrar_1.determineSigningAlg)(["ES256", "HS256", "RS256"], ["RS256"])).toBe("RS256");
        (0, globals_1.expect)((0, IClientRegistrar_1.determineSigningAlg)(["RS256"], ["RS256"])).toBe("RS256");
    });
    (0, globals_1.it)("returns null if there are no matches", () => {
        (0, globals_1.expect)((0, IClientRegistrar_1.determineSigningAlg)(["RS256"], ["ES256"])).toBeNull();
        (0, globals_1.expect)((0, IClientRegistrar_1.determineSigningAlg)(["RS256"], [])).toBeNull();
    });
});
//# sourceMappingURL=IClientRegistrar.test.js.map