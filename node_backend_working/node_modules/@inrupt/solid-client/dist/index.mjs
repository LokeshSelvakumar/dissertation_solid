export { FetchError, getContentType, getEffectiveAccess, getLinkedResourceUrlAll, getPodOwner, getResourceInfo, getSourceIri, getSourceUrl, isContainer, isPodOwner, isRawData, responseToResourceInfo } from './resource/resource.mjs';
export { deleteFile, getFile, overwriteFile, saveFileInContainer } from './resource/file.mjs';
export { changeLogAsMarkdown, createContainerAt, createContainerInContainer, createSolidDataset, deleteContainer, deleteSolidDataset, getContainedResourceUrlAll, getSolidDataset, getWellKnownSolid, responseToSolidDataset, saveSolidDatasetAt, saveSolidDatasetInContainer, solidDatasetAsMarkdown } from './resource/solidDataset.mjs';
export { mockContainerFrom, mockFetchError, mockFileFrom, mockSolidDatasetFrom } from './resource/mock.mjs';
export { ThingExpectedError, asIri, asUrl, createThing, getThing, getThingAll, isThing, isThingLocal, removeThing, setThing, thingAsMarkdown } from './thing/thing.mjs';
export { getBoolean, getBooleanAll, getDate, getDateAll, getDatetime, getDatetimeAll, getDecimal, getDecimalAll, getInteger, getIntegerAll, getIri, getIriAll, getLiteral, getLiteralAll, getNamedNode, getNamedNodeAll, getPropertyAll, getStringByLocaleAll, getStringEnglish, getStringEnglishAll, getStringNoLocale, getStringNoLocaleAll, getStringWithLocale, getStringWithLocaleAll, getTerm, getTermAll, getTime, getTimeAll, getUrl, getUrlAll } from './thing/get.mjs';
export { addBoolean, addDate, addDatetime, addDecimal, addInteger, addIri, addLiteral, addNamedNode, addStringEnglish, addStringNoLocale, addStringWithLocale, addTerm, addTime, addUrl } from './thing/add.mjs';
export { setBoolean, setDate, setDatetime, setDecimal, setInteger, setIri, setLiteral, setNamedNode, setStringNoLocale, setStringWithLocale, setTerm, setTime, setUrl } from './thing/set.mjs';
export { removeAll, removeBoolean, removeDate, removeDatetime, removeDecimal, removeInteger, removeIri, removeLiteral, removeNamedNode, removeStringEnglish, removeStringNoLocale, removeStringWithLocale, removeTime, removeUrl } from './thing/remove.mjs';
export { buildThing } from './thing/build.mjs';
export { mockThingFrom } from './thing/mock.mjs';
export { createAcl, createAclFromFallbackAcl, deleteAclFor, getFallbackAcl, getFileWithAcl, getResourceAcl, getResourceInfoWithAcl, getSolidDatasetWithAcl, hasAccessibleAcl, hasAcl, hasFallbackAcl, hasResourceAcl, saveAclFor } from './acl/acl.mjs';
export { getAgentAccess, getAgentAccessAll, getAgentDefaultAccess, getAgentDefaultAccessAll, getAgentResourceAccess, getAgentResourceAccessAll, setAgentDefaultAccess, setAgentResourceAccess } from './acl/agent.mjs';
export { getGroupAccess, getGroupAccessAll, getGroupDefaultAccess, getGroupDefaultAccessAll, getGroupResourceAccess, getGroupResourceAccessAll, setGroupDefaultAccess, setGroupResourceAccess } from './acl/group.mjs';
export { getPublicAccess, getPublicDefaultAccess, getPublicResourceAccess, setPublicDefaultAccess, setPublicResourceAccess } from './acl/class.mjs';
export { addMockFallbackAclTo, addMockResourceAclTo } from './acl/mock.mjs';
export { SolidClientError, hasResourceInfo, hasServerResourceInfo } from './interfaces.mjs';
export { fromRdfJsDataset, toRdfJsDataset } from './rdfjs.mjs';
export { addJwkToJwks, addPublicKeyToProfileJwks, getProfileJwksIri, setProfileJwks } from './profile/jwks.mjs';
export { getAltProfileUrlAllFrom, getPodUrlAll, getPodUrlAllFrom, getProfileAll } from './profile/webid.mjs';
export { getJsonLdParser } from './formats/jsonLd.mjs';
export { getTurtleParser } from './formats/turtle.mjs';
export { solidDatasetAsTurtle } from './formats/solidDatasetAsTurtle.mjs';
export { acp_v1 } from './acp/v1.mjs';
export { acp_v2 } from './acp/v2.mjs';
export { acp_v3 } from './acp/v3.mjs';
export { acp_v4 } from './acp/v4.mjs';
import * as universal_v1 from './access/universal_v1.mjs';
export { universal_v1 as access_v1 };
import * as universal_v2 from './access/universal_v2.mjs';
export { universal_v2 as access_v2 };
import * as universal from './access/universal.mjs';
export { universal as access };
import * as index from './universal/index.mjs';
export { index as universalAccess };
import * as ess1 from './acp/ess1.mjs';
export { ess1 as acp_ess_1 };
import * as ess2 from './acp/ess2.mjs';
export { ess2 as acp_ess_2 };
