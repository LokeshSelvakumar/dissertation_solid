/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import { SolidClientError } from "./interfaces";
/**
 * IRIs of the XML Schema data types we support
 */
export declare const xmlSchemaTypes: {
    readonly boolean: "http://www.w3.org/2001/XMLSchema#boolean";
    readonly dateTime: "http://www.w3.org/2001/XMLSchema#dateTime";
    readonly date: "http://www.w3.org/2001/XMLSchema#date";
    readonly time: "http://www.w3.org/2001/XMLSchema#time";
    readonly decimal: "http://www.w3.org/2001/XMLSchema#decimal";
    readonly integer: "http://www.w3.org/2001/XMLSchema#integer";
    readonly string: "http://www.w3.org/2001/XMLSchema#string";
    readonly langString: "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString";
};
export declare type XmlSchemaTypeIri = typeof xmlSchemaTypes[keyof typeof xmlSchemaTypes];
/**
 * Time type for time data type attributes
 *
 * @since 1.10.0
 */
export declare type Time = {
    hour: number;
    minute: number;
    second: number;
    millisecond?: number;
    timezoneHourOffset?: number;
    timezoneMinuteOffset?: number;
};
/**
 * This error is thrown when a given value is not a proper URL.
 */
export declare class ValidUrlExpectedError extends SolidClientError {
    readonly receivedValue: unknown;
    constructor(receivedValue: unknown);
}
