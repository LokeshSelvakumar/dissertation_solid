"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
function hasIssuer(options) {
    return typeof options.oidcIssuer === "string";
}
class OidcLoginHandler {
    constructor(storageUtility, oidcHandler, issuerConfigFetcher, clientRegistrar) {
        this.storageUtility = storageUtility;
        this.oidcHandler = oidcHandler;
        this.issuerConfigFetcher = issuerConfigFetcher;
        this.clientRegistrar = clientRegistrar;
    }
    async canHandle(options) {
        return hasIssuer(options);
    }
    async handle(options) {
        var _a;
        if (!hasIssuer(options)) {
            throw new solid_client_authn_core_1.ConfigurationError(`OidcLoginHandler requires an OIDC issuer: missing property 'oidcIssuer' in ${JSON.stringify(options)}`);
        }
        const issuerConfig = await this.issuerConfigFetcher.fetchConfig(options.oidcIssuer);
        const clientInfo = await (0, solid_client_authn_core_1.handleRegistration)(options, issuerConfig, this.storageUtility, this.clientRegistrar);
        const oidcOptions = {
            issuer: issuerConfig.issuer,
            dpop: options.tokenType.toLowerCase() === "dpop",
            redirectUrl: options.redirectUrl,
            issuerConfiguration: issuerConfig,
            client: clientInfo,
            sessionId: options.sessionId,
            refreshToken: (_a = options.refreshToken) !== null && _a !== void 0 ? _a : (await this.storageUtility.getForUser(options.sessionId, "refreshToken")),
            handleRedirect: options.handleRedirect,
            eventEmitter: options.eventEmitter,
        };
        return this.oidcHandler.handle(oidcOptions);
    }
}
exports.default = OidcLoginHandler;
//# sourceMappingURL=OidcLoginHandler.js.map