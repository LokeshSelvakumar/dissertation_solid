"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.negotiateClientSigningAlg = void 0;
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
const openid_client_1 = require("openid-client");
const IssuerConfigFetcher_1 = require("./IssuerConfigFetcher");
function negotiateClientSigningAlg(issuerConfig, clientPreference) {
    if (!Array.isArray(issuerConfig.idTokenSigningAlgValuesSupported)) {
        throw new Error("The OIDC issuer discovery profile is missing the 'id_token_signing_alg_values_supported' value, which is mandatory.");
    }
    const signingAlg = (0, solid_client_authn_core_1.determineSigningAlg)(issuerConfig.idTokenSigningAlgValuesSupported, clientPreference);
    if (signingAlg === null) {
        throw new Error(`No signature algorithm match between ${JSON.stringify(issuerConfig.idTokenSigningAlgValuesSupported)} supported by the Identity Provider and ${JSON.stringify(clientPreference)} preferred by the client.`);
    }
    return signingAlg;
}
exports.negotiateClientSigningAlg = negotiateClientSigningAlg;
class ClientRegistrar {
    constructor(storageUtility) {
        this.storageUtility = storageUtility;
    }
    async getClient(options, issuerConfig) {
        var _a, _b;
        const [storedClientId, storedClientSecret, storedClientName, storedIdTokenSignedResponseAlg,] = await Promise.all([
            this.storageUtility.getForUser(options.sessionId, "clientId"),
            this.storageUtility.getForUser(options.sessionId, "clientSecret"),
            this.storageUtility.getForUser(options.sessionId, "clientName"),
            this.storageUtility.getForUser(options.sessionId, "idTokenSignedResponseAlg"),
        ]);
        if (storedClientId) {
            return {
                clientId: storedClientId,
                clientSecret: storedClientSecret,
                clientName: storedClientName,
                idTokenSignedResponseAlg: storedIdTokenSignedResponseAlg !== null && storedIdTokenSignedResponseAlg !== void 0 ? storedIdTokenSignedResponseAlg : negotiateClientSigningAlg(issuerConfig, solid_client_authn_core_1.PREFERRED_SIGNING_ALG),
                clientType: "dynamic",
            };
        }
        const issuer = new openid_client_1.Issuer((0, IssuerConfigFetcher_1.configToIssuerMetadata)(issuerConfig));
        if (issuer.metadata.registration_endpoint === undefined) {
            throw new solid_client_authn_core_1.ConfigurationError(`Dynamic client registration cannot be performed, because issuer does not have a registration endpoint: ${JSON.stringify(issuer.metadata)}`);
        }
        const signingAlg = negotiateClientSigningAlg(issuerConfig, solid_client_authn_core_1.PREFERRED_SIGNING_ALG);
        const registeredClient = await issuer.Client.register({
            redirect_uris: [options.redirectUrl],
            client_name: options.clientName,
            id_token_signed_response_alg: signingAlg,
            grant_types: ["authorization_code", "refresh_token"],
        });
        const infoToSave = {
            clientId: registeredClient.metadata.client_id,
            idTokenSignedResponseAlg: (_a = registeredClient.metadata.id_token_signed_response_alg) !== null && _a !== void 0 ? _a : signingAlg,
        };
        if (registeredClient.metadata.client_secret) {
            infoToSave.clientSecret = registeredClient.metadata.client_secret;
        }
        await this.storageUtility.setForUser(options.sessionId, infoToSave);
        return {
            clientId: registeredClient.metadata.client_id,
            clientSecret: registeredClient.metadata.client_secret,
            clientName: registeredClient.metadata.client_name,
            idTokenSignedResponseAlg: (_b = registeredClient.metadata.id_token_signed_response_alg) !== null && _b !== void 0 ? _b : signingAlg,
            clientType: "dynamic",
        };
    }
}
exports.default = ClientRegistrar;
//# sourceMappingURL=ClientRegistrar.js.map