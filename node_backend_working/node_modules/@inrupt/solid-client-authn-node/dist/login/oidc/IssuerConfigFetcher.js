"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configToIssuerMetadata = exports.configFromIssuerMetadata = exports.WELL_KNOWN_OPENID_CONFIG = void 0;
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
const openid_client_1 = require("openid-client");
exports.WELL_KNOWN_OPENID_CONFIG = ".well-known/openid-configuration";
function configFromIssuerMetadata(metadata) {
    if (metadata.authorization_endpoint === undefined) {
        throw new solid_client_authn_core_1.ConfigurationError(`Issuer metadata is missing an authorization endpoint: ${JSON.stringify(metadata)}`);
    }
    if (metadata.token_endpoint === undefined) {
        throw new solid_client_authn_core_1.ConfigurationError(`Issuer metadata is missing an token endpoint: ${JSON.stringify(metadata)}`);
    }
    if (metadata.jwks_uri === undefined) {
        throw new solid_client_authn_core_1.ConfigurationError(`Issuer metadata is missing a keyset URI: ${JSON.stringify(metadata)}`);
    }
    if (metadata.claims_supported === undefined) {
        throw new solid_client_authn_core_1.ConfigurationError(`Issuer metadata is missing supported claims: ${JSON.stringify(metadata)}`);
    }
    if (metadata.subject_types_supported === undefined) {
        throw new solid_client_authn_core_1.ConfigurationError(`Issuer metadata is missing supported subject types: ${JSON.stringify(metadata)}`);
    }
    return {
        issuer: metadata.issuer,
        authorizationEndpoint: metadata.authorization_endpoint,
        subjectTypesSupported: metadata.subject_types_supported,
        claimsSupported: metadata.claims_supported,
        tokenEndpoint: metadata.token_endpoint,
        jwksUri: metadata.jwks_uri,
        userinfoEndpoint: metadata.userinfo_endpoint,
        registrationEndpoint: metadata.registration_endpoint,
        tokenEndpointAuthMethodsSupported: metadata.token_endpoint_auth_methods_supported,
        tokenEndpointAuthSigningAlgValuesSupported: metadata.token_endpoint_auth_signing_alg_values_supported,
        requestObjectSigningAlgValuesSupported: metadata.request_object_signing_alg_values_supported,
        grantTypesSupported: metadata.grant_types_supported,
        responseTypesSupported: metadata.response_types_supported,
        idTokenSigningAlgValuesSupported: metadata.id_token_signing_alg_values_supported,
        scopesSupported: metadata.scopes_supported === undefined
            ? ["openid"]
            : metadata.scopes_supported,
    };
}
exports.configFromIssuerMetadata = configFromIssuerMetadata;
function configToIssuerMetadata(config) {
    return {
        issuer: config.issuer,
        authorization_endpoint: config.authorizationEndpoint,
        jwks_uri: config.jwksUri,
        token_endpoint: config.tokenEndpoint,
        registration_endpoint: config.registrationEndpoint,
        subject_types_supported: config.subjectTypesSupported,
        claims_supported: config.claimsSupported,
        token_endpoint_auth_signing_alg_values_supported: config.tokenEndpointAuthSigningAlgValuesSupported,
        userinfo_endpoint: config.userinfoEndpoint,
        token_endpoint_auth_methods_supported: config.tokenEndpointAuthMethodsSupported,
        request_object_signing_alg_values_supported: config.requestObjectSigningAlgValuesSupported,
        grant_types_supported: config.grantTypesSupported,
        response_types_supported: config.responseTypesSupported,
        id_token_signing_alg_values_supported: config.idTokenSigningAlgValuesSupported,
        scopes_supported: config.scopesSupported,
    };
}
exports.configToIssuerMetadata = configToIssuerMetadata;
class IssuerConfigFetcher {
    constructor(storageUtility) {
        this.storageUtility = storageUtility;
    }
    static getLocalStorageKey(issuer) {
        return `issuerConfig:${issuer}`;
    }
    async fetchConfig(issuer) {
        const oidcIssuer = await openid_client_1.Issuer.discover(issuer);
        const issuerConfig = configFromIssuerMetadata(oidcIssuer.metadata);
        await this.storageUtility.set(IssuerConfigFetcher.getLocalStorageKey(issuer), JSON.stringify(issuerConfig));
        return issuerConfig;
    }
}
exports.default = IssuerConfigFetcher;
//# sourceMappingURL=IssuerConfigFetcher.js.map