import { ILoginInputOptions, ILoginHandler, ILogoutHandler, IIncomingRedirectHandler, ISessionInfo, ISessionInternalInfo, ISessionInfoManager } from "@inrupt/solid-client-authn-core";
import { EventEmitter } from "events";
export default class ClientAuthentication {
    private loginHandler;
    private redirectHandler;
    private logoutHandler;
    private sessionInfoManager;
    constructor(loginHandler: ILoginHandler, redirectHandler: IIncomingRedirectHandler, logoutHandler: ILogoutHandler, sessionInfoManager: ISessionInfoManager);
    login: (sessionId: string, options: ILoginInputOptions, eventEmitter: EventEmitter) => Promise<ISessionInfo | undefined>;
    fetch: typeof globalThis.fetch;
    logout: (sessionId: string) => Promise<void>;
    getSessionInfo: (sessionId: string) => Promise<(ISessionInfo & ISessionInternalInfo) | undefined>;
    getSessionIdAll: () => Promise<string[]>;
    registerSession: (sessionId: string) => Promise<void>;
    clearSessionAll: () => Promise<void>;
    getAllSessionInfo: () => Promise<ISessionInfo[]>;
    handleIncomingRedirect: (url: string, eventEmitter: EventEmitter) => Promise<ISessionInfo | undefined>;
}
