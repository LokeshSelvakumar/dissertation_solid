"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClientAuthenticationWithDependencies = exports.buildRedirectHandler = exports.buildLoginHandler = void 0;
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
const StorageUtility_1 = __importDefault(require("./storage/StorageUtility"));
const ClientAuthentication_1 = __importDefault(require("./ClientAuthentication"));
const OidcLoginHandler_1 = __importDefault(require("./login/oidc/OidcLoginHandler"));
const AggregateOidcHandler_1 = __importDefault(require("./login/oidc/AggregateOidcHandler"));
const AuthorizationCodeWithPkceOidcHandler_1 = __importDefault(require("./login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler"));
const RefreshTokenOidcHandler_1 = __importDefault(require("./login/oidc/oidcHandlers/RefreshTokenOidcHandler"));
const IssuerConfigFetcher_1 = __importDefault(require("./login/oidc/IssuerConfigFetcher"));
const GeneralLogoutHandler_1 = __importDefault(require("./logout/GeneralLogoutHandler"));
const SessionInfoManager_1 = require("./sessionInfo/SessionInfoManager");
const AuthCodeRedirectHandler_1 = require("./login/oidc/incomingRedirectHandler/AuthCodeRedirectHandler");
const FallbackRedirectHandler_1 = require("./login/oidc/incomingRedirectHandler/FallbackRedirectHandler");
const AggregateIncomingRedirectHandler_1 = __importDefault(require("./login/oidc/AggregateIncomingRedirectHandler"));
const Redirector_1 = __importDefault(require("./login/oidc/Redirector"));
const ClientRegistrar_1 = __importDefault(require("./login/oidc/ClientRegistrar"));
const TokenRefresher_1 = __importDefault(require("./login/oidc/refresh/TokenRefresher"));
const ClientCredentialsOidcHandler_1 = __importDefault(require("./login/oidc/oidcHandlers/ClientCredentialsOidcHandler"));
const buildLoginHandler = (storageUtility, tokenRefresher, issuerConfigFetcher, clientRegistrar) => {
    return new OidcLoginHandler_1.default(storageUtility, new AggregateOidcHandler_1.default([
        new RefreshTokenOidcHandler_1.default(tokenRefresher, storageUtility),
        new ClientCredentialsOidcHandler_1.default(tokenRefresher, storageUtility),
        new AuthorizationCodeWithPkceOidcHandler_1.default(storageUtility, new Redirector_1.default()),
    ]), issuerConfigFetcher, clientRegistrar);
};
exports.buildLoginHandler = buildLoginHandler;
const buildRedirectHandler = (storageUtility, sessionInfoManager, issuerConfigFetcher, clientRegistrar, tokenRefresher) => {
    return new AggregateIncomingRedirectHandler_1.default([
        new AuthCodeRedirectHandler_1.AuthCodeRedirectHandler(storageUtility, sessionInfoManager, issuerConfigFetcher, clientRegistrar, tokenRefresher),
        new FallbackRedirectHandler_1.FallbackRedirectHandler(),
    ]);
};
exports.buildRedirectHandler = buildRedirectHandler;
function getClientAuthenticationWithDependencies(dependencies) {
    const inMemoryStorage = new solid_client_authn_core_1.InMemoryStorage();
    const secureStorage = dependencies.secureStorage || inMemoryStorage;
    const insecureStorage = dependencies.insecureStorage || inMemoryStorage;
    const storageUtility = new StorageUtility_1.default(secureStorage, insecureStorage);
    const issuerConfigFetcher = new IssuerConfigFetcher_1.default(storageUtility);
    const clientRegistrar = new ClientRegistrar_1.default(storageUtility);
    const sessionInfoManager = new SessionInfoManager_1.SessionInfoManager(storageUtility);
    const tokenRefresher = new TokenRefresher_1.default(storageUtility, issuerConfigFetcher, clientRegistrar);
    const loginHandler = (0, exports.buildLoginHandler)(storageUtility, tokenRefresher, issuerConfigFetcher, clientRegistrar);
    const redirectHandler = (0, exports.buildRedirectHandler)(storageUtility, sessionInfoManager, issuerConfigFetcher, clientRegistrar, tokenRefresher);
    return new ClientAuthentication_1.default(loginHandler, redirectHandler, new GeneralLogoutHandler_1.default(sessionInfoManager), sessionInfoManager);
}
exports.getClientAuthenticationWithDependencies = getClientAuthenticationWithDependencies;
//# sourceMappingURL=dependencies.js.map