"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearSessionFromStorageAll = exports.getSessionIdFromStorageAll = exports.getSessionFromStorage = void 0;
const dependencies_1 = require("./dependencies");
const Session_1 = require("./Session");
async function getSessionFromStorage(sessionId, storage, onNewRefreshToken) {
    const clientAuth = storage
        ? (0, dependencies_1.getClientAuthenticationWithDependencies)({
            secureStorage: storage,
            insecureStorage: storage,
        })
        : (0, dependencies_1.getClientAuthenticationWithDependencies)({
            secureStorage: Session_1.defaultStorage,
            insecureStorage: Session_1.defaultStorage,
        });
    const sessionInfo = await clientAuth.getSessionInfo(sessionId);
    if (sessionInfo === undefined) {
        return undefined;
    }
    const session = new Session_1.Session({
        sessionInfo,
        clientAuthentication: clientAuth,
        onNewRefreshToken,
    });
    if (sessionInfo.refreshToken) {
        await session.login({
            oidcIssuer: sessionInfo.issuer,
        });
    }
    return session;
}
exports.getSessionFromStorage = getSessionFromStorage;
async function getSessionIdFromStorageAll(storage) {
    const clientAuth = storage
        ? (0, dependencies_1.getClientAuthenticationWithDependencies)({
            secureStorage: storage,
            insecureStorage: storage,
        })
        : (0, dependencies_1.getClientAuthenticationWithDependencies)({
            secureStorage: Session_1.defaultStorage,
            insecureStorage: Session_1.defaultStorage,
        });
    return clientAuth.getSessionIdAll();
}
exports.getSessionIdFromStorageAll = getSessionIdFromStorageAll;
async function clearSessionFromStorageAll(storage) {
    const clientAuth = storage
        ? (0, dependencies_1.getClientAuthenticationWithDependencies)({
            secureStorage: storage,
            insecureStorage: storage,
        })
        : (0, dependencies_1.getClientAuthenticationWithDependencies)({
            secureStorage: Session_1.defaultStorage,
            insecureStorage: Session_1.defaultStorage,
        });
    return clientAuth.clearSessionAll();
}
exports.clearSessionFromStorageAll = clearSessionFromStorageAll;
//# sourceMappingURL=multiSession.js.map